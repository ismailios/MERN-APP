{"ast":null,"code":"import { BASE_URL } from \"../../config/config\";\nexport const SIGNUP = \"SIGNUP\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const AUTHENTICATE = \"AUTHENTICATE\";\nconst formData = new FormData();\nlet timer;\nconst expirationDate = new Date(new Date().getTime() + parseInt(3600 * 1000));\nexport const authenticate = (userId, token, expiryTime) => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token,\n      expiryTime: expiryTime\n    });\n  };\n};\nexport const signUp = (username, email, password) => {\n  return async dispatch => {\n    const response = await fetch(BASE_URL + \"signup\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: username,\n        email: email,\n        password: password\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Something went Wrong !!\");\n    }\n\n    const resData = await response.json();\n    dispatch({\n      type: SIGNUP\n    });\n  };\n};\nexport const login = (email, password) => {\n  return async dispatch => {\n    const response = await fetch(BASE_URL + \"login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Something went Wrong !!\");\n    }\n\n    const resData = await response.json();\n    dispatch(authenticate(resData.userId, resData.token, expirationDate));\n    saveDataToStorage(resData.token, resData.userId, expirationDate);\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"userData\");\n  return {\n    type: LOGOUT\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationData) => {\n  localStorage.setItem(\"userData\", JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationData.toISOString()\n  }));\n};","map":{"version":3,"sources":["/Users/user/Desktop/Projects/Node Js/Recap/nodeJS-ReactJS-Crud/frontend/src/store/auth/actions.js"],"names":["BASE_URL","SIGNUP","LOGIN","LOGOUT","AUTHENTICATE","formData","FormData","timer","expirationDate","Date","getTime","parseInt","authenticate","userId","token","expiryTime","dispatch","type","signUp","username","email","password","response","fetch","method","body","JSON","stringify","ok","Error","resData","json","login","saveDataToStorage","logout","localStorage","removeItem","expirationData","setItem","expiryDate","toISOString"],"mappings":"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","sourcesContent":["import { BASE_URL } from \"../../config/config\";\n\nexport const SIGNUP = \"SIGNUP\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const AUTHENTICATE = \"AUTHENTICATE\";\n\nconst formData = new FormData();\nlet timer;\nconst expirationDate = new Date(new Date().getTime() + parseInt(3600 * 1000));\n\nexport const authenticate = (userId, token, expiryTime) => {\n  return (dispatch) => {\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token,\n      expiryTime: expiryTime,\n    });\n  };\n};\n\nexport const signUp = (username, email, password) => {\n  return async (dispatch) => {\n    const response = await fetch(BASE_URL + \"signup\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: username,\n        email: email,\n        password: password,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Something went Wrong !!\");\n    }\n    const resData = await response.json();\n\n    dispatch({\n      type: SIGNUP,\n    });\n  };\n};\n\nexport const login = (email, password) => {\n  return async (dispatch) => {\n    const response = await fetch(BASE_URL + \"login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Something went Wrong !!\");\n    }\n\n    const resData = await response.json();\n\n    dispatch(authenticate(resData.userId, resData.token, expirationDate));\n\n    saveDataToStorage(resData.token, resData.userId, expirationDate);\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"userData\");\n  return {\n    type: LOGOUT,\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationData) => {\n  localStorage.setItem(\n    \"userData\",\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      expiryDate: expirationData.toISOString(),\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}